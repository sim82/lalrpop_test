//use std::str::FromStr;
use crate::{ast::{Expr, Opcode, Ident, Stmt, HandleMapDedup, Toplevel, Declaration}, parser::binop, };
use lalrpop_util::ErrorRecovery;

//grammar;
grammar<'err>(env: &mut dyn HandleMapDedup<String>, errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

pub Program = Toplevel*;

Toplevel : Toplevel = {
    Stmt => Toplevel::Stmt(<>),
    Declaration => Toplevel::Declaration(<>),
}

Declaration : Declaration = "fn" <Ident> "(" <Comma<Ident>> ")" <FunctionBodyStmt> => Declaration::Function(<>);

Stmt : Stmt = {
    <InlineStmt> ";",
    BlockStmt,
    IfStmt,
    WhileStmt

}

InlineStmt = {
//   <ExprStmt>,
    <LetBindingStmt>,
    <PrintStmt>,
    <AssignStmt>,
    <CallStmt>,
    <ReturnStmt>,
}

IfStmt: Stmt = "if" <expr:Expr> <if_body:BlockStmt> <else_body:("else" <Stmt>)?> => match else_body {
    Some(body) => Stmt::IfElse(expr, Box::new(if_body), Some(Box::new(body))),
    None => Stmt::IfElse(expr, Box::new(if_body), None),
};
FunctionBodyStmt: Stmt = "{" <Stmt*> "}" => Stmt::Block(<>, false);
BlockStmt: Stmt = "{" <Stmt*> "}" => Stmt::Block(<>, true);
LetBindingStmt: Stmt = "let" <name:Ident> "=" <expr:Expr> => Stmt::LetBinding(name, expr);
AssignStmt: Stmt = <name:Ident> "=" <expr:Expr> => Stmt::Assign(name, expr, None);
CallStmt: Stmt = <CallExpr> => Stmt::Call(<>);
PrintStmt: Stmt = "print" <exprs:Exprs> => Stmt::Print(exprs);
WhileStmt: Stmt = "while" <expr:Expr> <body:BlockStmt> => Stmt::While(expr, Box::new(body));
ReturnStmt: Stmt = "return" <Expr> => Stmt::Return(<>);
//ExprStmt : Stmt = <Expr> => Stmt::Expr(<>);
pub Exprs = Comma<Expr>; // (0)


Expr = Tier<OrOp, AndExpr>;
OrOp: Opcode = "or" => Opcode::Or;

AndExpr = Tier<AndOp, CmpExpr>;
AndOp: Opcode = "and" => Opcode::And;

//NotExpr: Expr = {
//    "not" <expr:NotExpr> => unop(UnOp::Not, expr),
//    CmpExpr,
//};

CmpOp: Opcode = {
    "==" => Opcode::Equal,
    "!=" => Opcode::NotEqual,
    "<" => Opcode::LessThan,
    "<=" => Opcode::LessEqual,
    ">" => Opcode::GreaterThan,
    ">=" => Opcode::GreaterEqual,
};

CmpExpr = Tier<CmpOp, AddExpr>;

AddExpr = Tier<AddOp, MulExpr>;
MulExpr = Tier<MulOp, Term>;

AddOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

MulOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};


Term: Expr = {
    Num => Expr::Number(<>),
    Ident => Expr::EnvLoad(<>),
    CallExpr,
    "(" <Expr> ")",
    ! => { errors.push(<>); Expr::Error },
};
CallExpr: Expr = <name:Ident> "(" <exprs:Exprs> ")" => Expr::Call(name, exprs);

Ident: Ident = r"[a-zA-Z_]\w*" => env.get_dedup(<>.into());

Literal: i64 = {
    "true" => 1,
    "false" => 0,
    Num,
};

Num: i64 = {
    NumDec,
    NumHex,
    NumOct,
    NumBin
}
NumDec: i64 = r"[0-9]+" => <>.parse().unwrap();
NumHex: i64 = r"0[xX][0-9a-fA-F]+" => i64::from_str_radix(&<>[2..], 16).unwrap();
NumOct: i64 = r"0[oO][0-7]+" => i64::from_str_radix(&<>[2..], 8).unwrap();
NumBin: i64 = r"0[bB][01]+" => i64::from_str_radix(&<>[2..], 2).unwrap();

Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Tier<Op,NextTier>: Expr = {
    Tier<Op,NextTier> Op NextTier => binop(<>),
    NextTier
}; 

