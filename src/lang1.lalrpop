use std::str::FromStr;
use crate::{ast::{Expr, Opcode, Ident, Stmt}, parser::binop, HandleMapDedup};
use lalrpop_util::ErrorRecovery;

//grammar;
grammar<'err>(env: &mut dyn HandleMapDedup<&'input str>, errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

pub Program = Stmt*;

//Line = {
//    <Stmt>
//}

Stmt : Stmt = {
    <InlineStmt> ";",
    BlockStmt,
    IfStmt,
}

InlineStmt = {
//   <ExprStmt>,
    <LetBindingStmt>,
    <PrintStmt>
}

IfStmt: Stmt = "if" <expr:Expr> <if_body:BlockStmt> <else_body:("else" <Stmt>)?> => match else_body {
    Some(body) => Stmt::IfElse(expr, Box::new(if_body), Some(Box::new(body))),
    None => Stmt::IfElse(expr, Box::new(if_body), None),
};
BlockStmt: Stmt = "{" <Stmt*> "}" => Stmt::Block(<>);
LetBindingStmt: Stmt = "let" <name:Ident> "=" <expr:Expr> => Stmt::LetBinding(name, expr);
PrintStmt: Stmt = "print" <exprs:Exprs> => Stmt::Print(exprs);
//ExprStmt : Stmt = <Expr> => Stmt::Expr(<>);
pub Exprs = Comma<Expr>; // (0)

Tier<Op,NextTier>: Expr = {
    Tier<Op,NextTier> Op NextTier => binop(<>),
    NextTier
}; 

Expr = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ExprOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};


Term: Expr = {
    Num => Expr::Number(<>),
    Ident => Expr::EnvLoad(<>),
    "(" <Expr> ")",
    ! => { errors.push(<>); Expr::Error },
};

Ident: Ident = r"[a-zA-Z_]\w*" => env.get_dedup(<>);

Literal: i64 = {
    "true" => 1,
    "false" => 0,
    Num,
};

Num: i64 = {
    NumDec,
    NumHex,
    NumOct,
    NumBin
}
NumDec: i64 = r"[0-9]+" => <>.parse().unwrap();
NumHex: i64 = r"0[xX][0-9a-fA-F]+" => i64::from_str_radix(&<>[2..], 16).unwrap();
NumOct: i64 = r"0[oO][0-7]+" => i64::from_str_radix(&<>[2..], 8).unwrap();
NumBin: i64 = r"0[bB][01]+" => i64::from_str_radix(&<>[2..], 2).unwrap();

Comma<T>: Vec<T> = { // (1)
    <v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
